containers:

  docs:
    setup:
    - !Ubuntu trusty
    - !Install [python-sphinx, make]

  alpine-docs:
    setup:
    - !Alpine v3.1
    - !Install [alpine-base, py-sphinx, make]

  rust-musl:
    setup:
    - !UbuntuRelease {version: 15.04}
    - !UbuntuUniverse
    - !Install [build-essential, ca-certificates]
    - !BuildDeps [cmake, llvm-dev, libc++-dev, file, curl, python,
        autoconf, automake, autotools-dev, libtool, texlive-extra-utils]
    - !GitInstall
      url: git://git.musl-libc.org/musl
      script: |
        ./configure
        make
        make install
    - !EnsureDir /usr/lib/llvm-3.6/share/llvm
    - !GitInstall
      url: git://github.com/pathscale/libunwind.git
      script: |
        autoreconf -i
        ./configure --prefix=/usr/local/musl --disable-shared
        make
        make install
    #- !GitInstall
    #  url: https://github.com/llvm-mirror/libcxxabi
    #  script: |
    #    ln -sn /usr/share/llvm-3.6/cmake /usr/lib/llvm-3.6/share/llvm/cmake
    #    cmake . \
    #      -DLIBCXXABI_LIBCXX_INCLUDES=/usr/include/c++/v1 \
    #      -DLIBCXXABI_LIBCXX_PATH=/usr/lib \
    #      -DCMAKE_CXX_FLAGS=-std=c++11
    #      #-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    #    make
    #    make install
    #    cp lib/libunwind.a /usr/local/musl/lib
    - !TarInstall
      url: https://static.rust-lang.org/dist/rustc-nightly-src.tar.gz
      script: |
        ./configure --target=x86_64-unknown-linux-musl --musl-root=/usr/local/musl
        make
        make install

  ubuntu-package:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !TarInstall
      url: https://static.rust-lang.org/dist/rust-nightly-x86_64-unknown-linux-gnu.tar.gz
      script: |
        ./install.sh --prefix=/usr --components=rustc,cargo
    - !Install [make, checkinstall, git, uidmap, wget, gcc, libc6-dev, ca-certificates]
    environ:
      HOME: /work/target

  test:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !BuildDeps [wget, git, make]
    - !Sh |
        set -ex
        cd /tmp
        git clone git://github.com/sstephenson/bats
        cd bats
        ./install.sh /usr
    - !Depends vagga_launcher
    - !Depends vagga_wrapper
    - !Depends vagga_build
    - !Depends vagga_version
    - !Depends vagga_setup_netns
    - !Depends vagga_network
    - !Depends apk
    - !Depends busybox
    - !Depends alpine-keys.apk
    - !Sh make install
    auto-clean: true

commands:

  print-env: !Command
    container: docs
    run: [env]

  docs-bash: !Command
    container: docs
    run: [bash]

  build-docs: !Command
    description: Build vagga documentation
    container: docs
    run: [make]
    work-dir: docs

  build-docs-apline: !Command
    description: Build vagga documentation (by alpine linux)
    container: alpine-docs
    run: [make]
    work-dir: docs

  html-docs: !Command
    description: Build vagga documentation (html version)
    container: docs
    run: make html
    work-dir: docs

  make: !Command
    description: Build vagga
    container: ubuntu-package
    run: [make]

  build-ubuntu-package: !Command
    description: Create an ubuntu (.deb) package using checkinstall in
      container
    container: ubuntu-package
    write-mode: transient-hard-link-copy
    accepts-arguments: true
    run: |
      make all "$@" || exit 1
      checkinstall \
        --default \
        --maintainer=paul@colomiets.name \
        --pkglicense=MIT \
        --pkgname=vagga \
        --pkgver="$(git describe | cut -c2-)" \
        --requires="uidmap" \
        --backup=no \
        --nodoc \
      make install

  test: !Command
    description: Run self tests
    container: test
    accepts-arguments: true
    run: |
      set -ex
      rm -rf tests/*/.vagga
      export HOME=/work/tmp/home
      mkdir -p $HOME /work/tmp/cache || true
      echo "cache-dir: /work/tmp/cache" > $HOME/.vagga.yaml
      if [ -n "$UBUNTU_MIRROR" ]; then
          echo "ubuntu-mirror: $UBUNTU_MIRROR" >> $HOME/.vagga.yaml
      fi
      if [ -n "$*" ]; then
        bats "$@"
      else
        bats tests
      fi

