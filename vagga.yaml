containers:

  docs:
    setup:
    - !Alpine v3.2
    - !Install [alpine-base, py-sphinx, make]
    - !Py2Requirements docs/requirements.txt

  rust-musl:
    environ:
      LD_LIBRARY_PATH: /usr/local/musl/lib:/usr/local/musl/lib/rustlib/x86_64-unknown-linux-gnu/lib
      PATH: /usr/local/musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !Install [build-essential, ca-certificates]
    - !Install [file]  # dependency of checkinstall (bug #46)
    - !BuildDeps [cmake, llvm-dev, libc++-dev, curl, python,
        autoconf, automake, autotools-dev, libtool, texlive-extra-utils]
    # Build instructions from
    # https://github.com/rust-lang/rust/blob/master/src/doc/trpl/advanced-linking.md
    - !TarInstall
      url: http://www.musl-libc.org/releases/musl-1.1.10.tar.gz
      script: |
        ./configure --disable-shared --prefix=/usr/local/musl
        make
        make install
        du -h /usr/local/musl/lib/libc.a
    - !EnsureDir /usr/lib/llvm-3.6/share/llvm
    - !BuildDeps [subversion]
    - !TarInstall
      url: http://llvm.org/releases/3.6.1/llvm-3.6.1.src.tar.xz
      script: |
        cd projects
        svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk/ libcxxabi
        svn co http://llvm.org/svn/llvm-project/libunwind/trunk/ libunwind
        sed -i 's#^\(include_directories\).*$#\0\n\1(../libcxxabi/include)#' libunwind/CMakeLists.txt
        mkdir libunwind/build
        cd libunwind/build
        cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..
        make
        cp lib/libunwind.a /usr/local/musl/lib/
        du -h /usr/local/musl/lib/libunwind.a
    - !TarInstall
      url: https://static.rust-lang.org/dist/rustc-1.3.0-src.tar.gz
      # We patch default thread stack size in musl libc here, because it was
      # esiest thing to do. It may be changed in case of:
      # 1. Rust brings the API to change thread stack size (e.g. pthread apis in nix)
      # 2. Anybody willing to build vagga on musl-based platform instead of container
      script: |
        ./configure --target=x86_64-unknown-linux-musl --musl-root=/usr/local/musl --prefix=/usr/local/musl
        sed -i.bak 's/#define DEFAULT_STACK_SIZE .*/#define DEFAULT_STACK_SIZE 8388608/' src/internal/pthread_impl.h
        make
        make install
        # fixes: multiple dylib candidates for `std` found
        rm /usr/local/musl/lib/lib*-*.so
        du -h /usr/local/musl/bin/rustc
    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.3.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr --components=cargo"

    # For packaging
    - !Install [make, checkinstall, git, uidmap, wget, gcc, libc6-dev, ca-certificates]

  testbase:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !BuildDeps [wget, git]
    - !Install [make]
    - !Sh |
        set -ex
        cd /tmp
        git clone git://github.com/sstephenson/bats
        cd bats
        ./install.sh /usr

  test:
    setup:
    - !Container testbase
    - !Depends vagga
    - !Depends apk
    - !Depends busybox
    - !Depends alpine-keys.apk
    - !Sh make install
    auto-clean: true

commands:

  print-env: !Command
    container: docs
    run: [env]

  doc: !Command
    description: Build vagga documentation
    container: docs
    run: [make, html]
    work-dir: docs
    epilog: |
      --------------------------------------------------------
      Documentation is built under docs/_build/html/index.html

  make: !Command
    description: Build vagga
    container: rust-musl
    run: [make]

  make-release: !Command
    description: Build vagga with optimizations
    container: rust-musl
    run: [make, release]

  cargo: !Command
    description: Run arbitrary cargo command
    container: rust-musl
    run: [cargo]

  build-packages: !Command
    description: Create an ubuntu (.deb) package using checkinstall in
      container and tar.gz. Both put into `dist/`
    container: rust-musl
    write-mode: transient-hard-link-copy
    environ:
      PATH: /usr/local/musl/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    run: |
      rm target/x86_64-unknown-linux-musl/release/vagga # rebuild for sure
      make release || exit 1
      make ubuntu-package
      make tarball

  build-packages-testing: !Command
    description: Same as build-packages but with debugging info enabled
    container: rust-musl
    write-mode: transient-hard-link-copy
    environ:
      PATH: /usr/local/musl/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    run: |
      rm target/x86_64-unknown-linux-musl/debug/vagga # rebuild for sure
      make all
      make ubuntu-package CHECKINSTALL_FLAGS=--strip=no
      make tarball

  test: !Command
    description: Run self tests
    container: test
    accepts-arguments: true
    run: |
      set -ex
      rm -rf tests/*/.vagga
      export HOME=/work/tmp/home
      mkdir -p $HOME /work/tmp/cache || true
      echo "cache-dir: /work/tmp/cache" > $HOME/.vagga.yaml
      if [ -n "$UBUNTU_MIRROR" ]; then
          echo "ubuntu-mirror: $UBUNTU_MIRROR" >> $HOME/.vagga.yaml
      fi
      if [ -n "$ALPINE_MIRROR" ]; then
          echo "alpine-mirror: $ALPINE_MIRROR" >> $HOME/.vagga.yaml
      fi
      if [ -n "$*" ]; then
        bats "$@"
      else
        bats tests
      fi

