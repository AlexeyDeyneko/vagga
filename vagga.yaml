containers:

  docs:
    setup:
    - !Ubuntu trusty
    - !Install [python-sphinx, make]

  alpine-docs:
    setup:
    - !Alpine v3.1
    - !Install [alpine-base, py-sphinx, make]

  rust-musl:
    environ:
      LD_LIBRARY_PATH: /usr/local/musl/lib:/usr/local/musl/lib/rustlib/x86_64-unknown-linux-gnu/lib
      PATH: /usr/local/musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !Install [build-essential, ca-certificates, wget]
    - !BuildDeps [cmake, llvm-dev, libc++-dev, file, curl, python,
        autoconf, automake, autotools-dev, libtool, texlive-extra-utils]
    # Build instructions from
    # https://github.com/rust-lang/rust/blob/master/src/doc/trpl/advanced-linking.md
    - !TarInstall
      url: http://www.musl-libc.org/releases/musl-1.1.10.tar.gz
      script: |
        ./configure --disable-shared --prefix=/usr/local/musl
        make
        make install
        du -h /usr/local/musl/lib/libc.a
    - !EnsureDir /usr/lib/llvm-3.6/share/llvm
    - !BuildDeps [subversion]
    - !TarInstall
      url: http://llvm.org/releases/3.6.1/llvm-3.6.1.src.tar.xz
      script: |
        cd projects
        svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk/ libcxxabi
        svn co http://llvm.org/svn/llvm-project/libunwind/trunk/ libunwind
        sed -i 's#^\(include_directories\).*$#\0\n\1(../libcxxabi/include)#' libunwind/CMakeLists.txt
        mkdir libunwind/build
        cd libunwind/build
        cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..
        make
        cp lib/libunwind.a /usr/local/musl/lib/
        du -h /usr/local/musl/lib/libunwind.a
    - !TarInstall
      url: https://static.rust-lang.org/dist/rustc-1.2.0-src.tar.gz
      script: |
        ./configure --target=x86_64-unknown-linux-musl --musl-root=/usr/local/musl --prefix=/usr/local/musl
        make
        make install
        # fixes: multiple dylib candidates for `std` found
        rm /usr/local/musl/lib/lib*-*.so
        du -h /usr/local/musl/bin/rustc
    - !TarInstall
      url: "http://static.rust-lang.org/dist/rust-1.2.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr --components=cargo"

  test:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !BuildDeps [wget, git, make]
    - !Sh |
        set -ex
        cd /tmp
        git clone git://github.com/sstephenson/bats
        cd bats
        ./install.sh /usr
    - !Depends vagga
    - !Depends apk
    - !Depends busybox
    - !Depends alpine-keys.apk
    - !Sh make install
    auto-clean: true

commands:

  print-env: !Command
    container: docs
    run: [env]

  docs-bash: !Command
    container: docs
    run: [bash]

  build-docs: !Command
    description: Build vagga documentation
    container: docs
    run: [make]
    work-dir: docs

  build-docs-apline: !Command
    description: Build vagga documentation (by alpine linux)
    container: alpine-docs
    run: [make]
    work-dir: docs

  html-docs: !Command
    description: Build vagga documentation (html version)
    container: docs
    run: make html
    work-dir: docs

  make: !Command
    description: Build vagga
    container: rust-musl
    run: [make]

  cargo: !Command
    description: Run arbitrary cargo command
    container: rust-musl
    run: [cargo]

  build-ubuntu-package: !Command
    description: Create an ubuntu (.deb) package using checkinstall in
      container
    container: rust-musl
    write-mode: transient-hard-link-copy
    accepts-arguments: true
    run: |
      make all "$@" || exit 1
      checkinstall \
        --default \
        --maintainer=paul@colomiets.name \
        --pkglicense=MIT \
        --pkgname=vagga \
        --pkgver="$(git describe | cut -c2-)" \
        --requires="uidmap" \
        --backup=no \
        --nodoc \
      make install

  test: !Command
    description: Run self tests
    container: test
    accepts-arguments: true
    run: |
      set -ex
      rm -rf tests/*/.vagga
      export HOME=/work/tmp/home
      mkdir -p $HOME /work/tmp/cache || true
      echo "cache-dir: /work/tmp/cache" > $HOME/.vagga.yaml
      if [ -n "$UBUNTU_MIRROR" ]; then
          echo "ubuntu-mirror: $UBUNTU_MIRROR" >> $HOME/.vagga.yaml
      fi
      if [ -n "$*" ]; then
        bats "$@"
      else
        bats tests
      fi

